{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list-component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","map","key","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","console","log","state","fetch","then","response","json","users","this","filterMonsters","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iUAEaA,G,kBAAO,SAACC,GAAD,OAChB,yBAAKC,UAAU,kBACf,yBAAKC,IAAI,YAAYC,IAAG,+BAA2BH,EAAMI,QAAQC,GAAzC,4BACxB,4BAAKL,EAAMI,QAAQE,MACnB,2BAAIN,EAAMI,QAAQG,UCDTC,EAAW,SAAAR,GACpB,OACI,yBAAKC,UAAU,aACdD,EAAMI,QAAQK,KAAI,SAAAL,GAAO,OAC3B,kBAAC,EAAD,CAAMM,IAAMN,EAAQC,GAAID,QAASA,SCL3BO,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,aAAd,OAErB,2BAAOC,KAAK,SAASb,UAAU,SAASW,YAAaA,EAAaG,SAAUF,MC0CjEG,E,YA1Cb,aAAc,IAAD,8BACX,+CAgBFH,aAAe,SAACI,GAEf,EAAKC,SAAS,CAACC,YAAYF,EAAEG,OAAOC,QACpCC,QAAQC,IAAIN,EAAEG,OAAOC,QAlBpB,EAAKG,MAAQ,CACXpB,QAAS,GAETe,YAAY,IALH,E,iFAWO,IAAD,OACjBM,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKX,SAAS,CAACd,QAAQyB,S,+BAS/B,IAAD,EACuBC,KAAKN,MAA3BpB,EADD,EACCA,QAAQe,EADT,EACSA,YACTY,EAAiB3B,EAAQ4B,QAAO,SAAA5B,GAAO,OAC3CA,EAAQE,KAAK2B,cAAcC,SAASf,EAAYc,kBAClD,OAEE,yBAAKhC,UAAU,OACf,4CACA,kBAAC,EAAD,CACEW,YAAc,kBACdC,aAAciB,KAAKjB,eACrB,kBAAC,EAAD,CAAUT,QAAU2B,S,GAnCRI,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,kB","file":"static/js/main.ac1de964.chunk.js","sourcesContent":["import React from 'react'\nimport './card.styles.css'\nexport const Card = (props) => (\n    <div className='card-container'> \n    <img alt=\"monsters \" src= {`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}></img>\n    <h1>{props.monster.name}</h1>\n    <p>{props.monster.email}</p></div>\n)   ","import React from 'react'\nimport './card-list.styles.css'\nimport { Card } from '../card/card.component'\n\n\nexport const CardList = props =>{\n    return(\n        <div className='card-list'>\n       { props.monster.map(monster =>\n       <Card key= {monster.id} monster={monster} />) }\n        </div>\n    )\n}\n\n","import React from 'react'\n\nimport '../search-box/search.styles.css'\n\nexport const SearchBox = ({placeholder,handleChange}) =>\n(\n    <input type='search' className='search' placeholder={placeholder} onChange={handleChange}\n    \n        ></input>   \n)","import React, { Component } from 'react'\nimport './App.css'\nimport {CardList} from'./components/card-list/card-list-component'\nimport { SearchBox } from './components/search-box/search-box.component';\n\nclass App extends Component{\n  constructor(){\n    super();\n    this.state = {\n      monster :[     \n      ],\n      searchField:'',\n    }\n\n    // this.handleChange=this.handleChange.bind(this) arrow function reduces the use of this \n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monster:users}))\n  }\n\n  handleChange = (e) =>\n  {\n   this.setState({searchField:e.target.value})\n   console.log(e.target.value )\n  }\n  \n  render(){\n    const {monster,searchField} =this.state;\n    const filterMonsters = monster.filter(monster=>\n      monster.name.toLowerCase().includes(searchField.toLowerCase()))\n    return(\n      \n      <div className=\"App\">\n      <h1>MonsterPedia</h1>\n      <SearchBox \n        placeholder = 'Search Monsters'\n        handleChange={this.handleChange}/>\n      <CardList monster= {filterMonsters} />\n     \n      \n  </div>\n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}